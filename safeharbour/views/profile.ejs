<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Profil</title>
    <link rel="stylesheet" href="profile.css" />
  </head>
  <body>
    <div class="main-container">
      <!-- air jumper ten div jest specjalnie ustawony z tymi arginesami żeby było tło idealnie -->
      <div class="left">
        <div
          style="
            border-radius: 50%;
            background-color: red;
            width: 350px;
            height: 350px;
          "
          id="profileColor"
        >
          <svg
            width="104%"
            height="104%"
            viewBox="0 0 350 350"
            style="margin-left: -2px; margin-top: -1px"
          >
            <path
              fill="#DDD"
              d="M169,0.5a169,169 0 1,0 2,0zM169,86a76,76 0 1 1-2,0zM57,287q27-35 67-35h92q40,0 67,35a164,164 0 0,1-226,0"
            />
          </svg>
        </div>
        <label class="color">Change color:</label>
        <input type="range" id="hueInput" class="range min="0" max="360"
        value="0" />
      </div>
      <div class="main">
        <p class="name"><%= imie %> <%= nazwisko %></p>
        <p class="handle">@<%= login %></p>
        <p class="mail"><%= email %></p>
      </div>
    </div>
    <script>
      function getCookie(cname) {
        let name = cname + "=";
        let decodedCookie = decodeURIComponent(document.cookie);
        let ca = decodedCookie.split(";");
        for (let i = 0; i < ca.length; i++) {
          let c = ca[i];
          while (c.charAt(0) == " ") {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }
      let coochie = getCookie("themeColor");
      if (coochie != null) {
        document.getElementById("profileColor").style.background = coochie;
      }
      let xd = 0;
      document.addEventListener("DOMContentLoaded", function () {
        const hueInput = document.getElementById("hueInput");
        let color;
        // Initial update
        updateColor();

        // Update color when the input value changes
        hueInput.addEventListener("input", updateColor);
        // Function to update color based on the input value
        function updateColor() {
          // Get hue value from the input
          const hue = hueInput.value;

          // Convert hue to RGB using HSL-to-RGB conversion
          const rgb = hslToRgb(hue / 360, 0.7, 0.3);

          // Convert RGB to hex
          color = rgbToHex(rgb[0], rgb[1], rgb[2]);

          if (xd == 0) {
            xd++;
            console.log(xd);
          } else {
            var r = document.querySelector(":root");
            r.style.setProperty("--color", `${color}`);
            document.getElementById("profileColor").style.background = color;
            hueInput.style.setProperty("--thumb-color", color);
            document.cookie = `themeColor = ${color}; expires=Thu, 18 Dec 2077 12:00:00 UTC`;
          }
        }

        // Function to convert HSL to RGB
        function hslToRgb(h, s, l) {
          let r, g, b;

          if (s == 0) {
            r = g = b = l; // achromatic
          } else {
            const hue2rgb = (p, q, t) => {
              if (t < 0) t += 1;
              if (t > 1) t -= 1;
              if (t < 1 / 6) return p + (q - p) * 6 * t;
              if (t < 1 / 2) return q;
              if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
              return p;
            };

            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            const p = 2 * l - q;

            r = hue2rgb(p, q, h + 1 / 3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1 / 3);
          }

          return [
            Math.round(r * 255),
            Math.round(g * 255),
            Math.round(b * 255),
          ];
        }

        // Function to convert RGB to hex
        function rgbToHex(r, g, b) {
          const componentToHex = (c) => {
            const hex = c.toString(16);
            return hex.length === 1 ? "0" + hex : hex;
          };

          return `#${componentToHex(
            r
          )}${componentToHex(g)}${componentToHex(b)}`;
        }
      });
    </script>
  </body>
</html>
